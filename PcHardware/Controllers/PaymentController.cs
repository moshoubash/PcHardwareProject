using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore.ValueGeneration.Internal;
using PcHardware.Models;
using PcHardware.Repositories.Cart;
using PcHardware.Services;
using Stripe;
using System;
using System.Numerics;
using System.Security.Policy;

namespace PcHardware.Controllers
{
    [Authorize(Roles = "client")]
    public class PaymentController : Controller
    {
        private readonly MyDbContext dbContext;
        private readonly UserManager<ApplicationUser> userManager;
        private readonly ICartRepository cartRepository;
        
        private readonly IConfiguration _configuration;

        public PaymentController(MyDbContext dbContext, UserManager<ApplicationUser> userManager, ICartRepository cartRepository, IConfiguration _configuration)
        {
            this.dbContext = dbContext;
            this.userManager = userManager;
            this.cartRepository = cartRepository;
            this._configuration = _configuration;
        }

        [HttpGet]
        public async Task<ActionResult> Checkout()
        {
            var user = await userManager.GetUserAsync(User);

            ViewBag.FirstName = user.FirstName;
            ViewBag.LastName = user.LastName;
            ViewBag.Email = user.Email;
            ViewBag.Id = user.Id;
            ViewBag.Countries = new SelectList(dbContext.Countries, "Id", "Name");

            var userCart = cartRepository.GetCartByUserId(user.Id);
            var userCartItems = dbContext.CartItems.Where(ci => ci.CartId == userCart.Id).ToList();

            ViewBag.CartSize = userCartItems.Count;
            ViewBag.StripePublishableKey = _configuration["Stripe:PublishableKey"];

            decimal totalAmount = userCartItems.Sum(item => item.Quantity * dbContext.Products.FirstOrDefault(p => p.Id == item.ProductId).Price);
            ViewBag.TotalAmount = TempData["UpdatedTotal"] != null ? decimal.Parse(TempData["UpdatedTotal"].ToString()) : totalAmount;

            return View(userCartItems);
        }

        [HttpPost]
        public async Task<ActionResult> Checkout(Models.Address address, decimal TotalAmount, string stripeToken)
        {
            var user = await userManager.GetUserAsync(User);

            // Add address to the database
            dbContext.Addresses.Add(address);
            dbContext.SaveChanges();

            var targetAddress = dbContext.Addresses.FirstOrDefault(a => a.UserId == user.Id);

            // Process the payment using Stripe
            var chargeOptions = new ChargeCreateOptions
            {
                Amount = (long)(TotalAmount * 100), // amount in cents
                Currency = "usd",
                Description = "Order Payment",
                Source = stripeToken, // Use the token generated by Stripe.js
                ReceiptEmail = user.Email,
                Metadata = new Dictionary<string, string>
        {
            { "User Id", user.Id },
            { "Email", user.Email },
            { "Name", $"{user.FirstName} {user.LastName}" },
            { "Phone Number", user.PhoneNumber }
        }
            };

            var service = new ChargeService();
            Charge charge;
            try
            {
                charge = await service.CreateAsync(chargeOptions);
            }
            catch (StripeException e)
            {
                // Handle the exception accordingly
                ViewBag.ErrorMessage = e.Message;
                return View("Failure");
            }

            if (charge.Status != "succeeded")
            {
                // Handle payment failure
                return View("Failure");
            }

            // Create new order
            var order = new Order
            {
                OrderDate = DateTime.Now,
                TotalAmount = TempData["UpdatedTotal"] != null ? decimal.Parse(TempData["UpdatedTotal"].ToString()) : TotalAmount,
                Status = "Pending",
                AddressId = targetAddress.Id,
                UserId = targetAddress.UserId,
                DiscountId = (int)(TempData["DiscountId"] != null ? int.Parse(TempData["DiscountId"].ToString()) : (int?)null)
            };

            // Add order to the database
            dbContext.Orders.Add(order);
            dbContext.SaveChanges();

            // Convert each cart item into an order item
            var targetCart = dbContext.Carts.FirstOrDefault(c => c.UserId == user.Id);
            var userCartItems = dbContext.CartItems.Where(ci => ci.CartId == targetCart.Id).ToList();

            foreach (var ci in userCartItems)
            {
                var price = dbContext.Products.FirstOrDefault(p => p.Id == ci.ProductId).Price;
                var oi = new OrderItem
                {
                    Quantity = ci.Quantity,
                    UnitPrice = price,
                    OrderId = order.Id,
                    ProductId = ci.ProductId
                };
                dbContext.OrderItems.Add(oi);
                dbContext.SaveChanges();
            }

            // Clear cart
            dbContext.CartItems.RemoveRange(userCartItems);
            dbContext.SaveChanges();

            return View("Success");
        }

        [HttpPost]
        public ActionResult ApplyDiscount(string discount, decimal total)
        {
            // Check if discount is already in database
            var GetDiscount = dbContext.Discounts.FirstOrDefault(d => d.Name.Equals(discount));

            // If discount is in database
            if (GetDiscount != null)
            {
                // Check if discount is active
                if (GetDiscount.IsActive && GetDiscount.StartDate <= DateTime.Now && GetDiscount.EndDate >= DateTime.Now)
                {
                    // Apply the discount to the total amount
                    total -= ((GetDiscount.DiscountPercentage / 100m) * total);
                    TempData["UpdatedTotal"] = total.ToString();
                    TempData["DiscountId"] = GetDiscount.Id;
                    return RedirectToAction("Checkout");
                }
                else
                {
                    return BadRequest("The discount is not active or has expired.");
                }
            }
            else
            {
                return BadRequest("The discount code is not in the database.");
            }
        }


        public ActionResult Success() 
        {
            return View();
        }

        public ActionResult Failure()
        {
            return View();
        }
    }
}
